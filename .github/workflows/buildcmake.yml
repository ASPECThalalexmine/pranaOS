name: Build

on: [push, pull_request]

env:
  PRANAOS_SOURCE_DIR: ${{ github.workspace }}

concurrency:
  group: ${{ github.head_ref || format('{0}-{1}', github.ref, github.run_number) }}
  cancel-in-progress: true

jobs:
  build_and_test_pranaos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        debug-options: ['ALL_DEBUG', 'NORMAL_DEBUG']
        os: [ubuntu-20.04]
        arch: ['i686', 'x86_64']
        ccache-mark: [0]
        exclude:
          - debug-options: 'ALL_DEBUG'
            arch: 'x86_64'

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2

    - name: "Install Ubuntu dependencies"

      run: |
        sudo add-apt-repository ppa:canonical-server/server-backports
        sudo apt-get update
        sudo apt-get install libmpfr-dev libmpc-dev ninja-build e2fsprogs qemu-utils qemu-system-i386 ccache
    - name: Use GCC 10 instead
      run: sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10

    - name: Install JS dependencies
      run: sudo npm install -g prettier@2.2.1
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 requests
    - name: Check versions
      run: set +e; g++ --version; g++-10 --version; clang-format --version; clang-format-11 --version; prettier --version; python --version; python3 --version; ninja --version; flake8 --version; ccache --version; qemu-system-i386 --version


    - name: Lint (Phase 1/2)
      run: ${{ github.workspace }}/Meta/lint-ci.sh
    - name: Prepare useful stamps
      id: stamps
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y_%m_%d_%H_%M_%S" UTC)
        # Output everything twice to make it visible both in the logs
        # *and* as actual output variable, in this order.
        message("  set-output name=time::${current_date}")
        message("::set-output name=time::${current_date}")
        message("  set-output name=libc_headers::${{ hashFiles('Userland/Libraries/LibC/**/*.h', 'Userland/Libraries/LibPthread/**/*.h', 'Toolchain/Patches/*.patch', 'Toolchain/BuildIt.sh') }}")
        message("::set-output name=libc_headers::${{ hashFiles('Userland/Libraries/LibC/**/*.h', 'Userland/Libraries/LibPthread/**/*.h', 'Toolchain/Patches/*.patch', 'Toolchain/BuildIt.sh') }}")
    - name: Toolchain cache
      uses: actions/cache@03e00da99d75a2204924908e1cca7902cafce66b
      env:
        CACHE_SKIP_SAVE: ${{ github.event_name == 'pull_request' }}
      with:
        path: ${{ github.workspace }}/Toolchain/Cache/
        key: ${{ runner.os }}-toolchain-${{ matrix.arch }}-${{ steps.stamps.outputs.libc_headers }}
    - name: Restore or regenerate Toolchain
      run: TRY_USE_LOCAL_TOOLCHAIN=y ARCH="${{ matrix.arch }}" ${{ github.workspace }}/Toolchain/BuildIt.sh
    - name: ccache(1) cache

      uses: actions/cache@03e00da99d75a2204924908e1cca7902cafce66b
      env:
        CACHE_SKIP_SAVE: ${{ github.event_name == 'pull_request' }}
      with:
        path: /home/runner/.ccache
        key: ${{ runner.os }}-ccache-${{ matrix.arch }}-v${{ matrix.ccache-mark }}-D${{ matrix.debug-options }}-toolchain_${{steps.stamps.outputs.libc_headers}}-time${{ steps.stamps.outputs.time }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.arch }}-v${{ matrix.ccache-mark }}-D${{ matrix.debug-options }}-toolchain_${{steps.stamps.outputs.libc_headers}}-
    - name: Show ccache stats before build and configure
      run: |
        # We only have 5 GiB of cache available *in total*. Beyond that, GitHub deletes caches.
        # Currently, we use about 130 MB for the two toolchains (i686 & x86_64), and four ccache caches:
        # Two with ALL_DEBUG (i686 & x86_64) and two with NORMAL_DEBUG (i686 & x86_64).
        # Therefore, using 1.25 GB or more per cache causes disaster.
        # Building from scratch fills the ccache cache from 0 to about 0.7 GB, and after compression it comes out to
        # about 0.25 GB, so 1.5 GB (0.5GB after compression) should be plenty, all while comfortly fitting in the cache.
        ccache -M 1500M
        ccache -s
    - name: Create build environment with extra debug options
      working-directory: ${{ github.workspace }}
      run: |
        mkdir -p Build
        cd Build
        cmake .. -GNinja -DPRANAOS_ARCH=${{ matrix.arch }} -DBUILD_LAGOM=ON -DENABLE_ALL_DEBUG_FACILITIES=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DENABLE_USB_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10
      if: ${{ matrix.debug-options == 'ALL_DEBUG' }}
    - name: Create build environment
      working-directory: ${{ github.workspace }}
      run: |
        mkdir -p Build
        cd Build
        cmake .. -GNinja -DPRANAOS_ARCH=${{ matrix.arch }} -DENABLE_UNDEFINED_SANITIZER=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DENABLE_USB_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10
      if: ${{ matrix.debug-options == 'NORMAL_DEBUG' }}


    - name: Build pranaOS and Tests
      working-directory: ${{ github.workspace }}/Build
      run: cmake --build .
    - name: Show ccache stats after build
      run: ccache -s
    - name: Lint (Phase 2/2)
      working-directory: ${{ github.workspace }}/Meta
      run: ./check-symbols.sh

    - name: Create pranaOS Rootfs
      if: ${{ matrix.debug-options == 'NORMAL_DEBUG'}}
      working-directory: ${{ github.workspace }}/Build
      run: ninja install && ninja image

    - name: Run On-Target Tests
      if: ${{ matrix.debug-options == 'NORMAL_DEBUG'}}
      working-directory: ${{ github.workspace }}/Build
      env:
        PRANAOS_QEMU_CPU: "max,vmx=off"
        PRANAOS_KERNEL_CMDLINE: "boot_mode=self-test"
        PRANAOS_RUN: "ci"
      run: |
        echo "::group::ninja run # Qemu output"
        ninja run
        echo "::endgroup::"
        echo "::group::Verify Output File"
        mkdir fsmount
        sudo mount -t ext2 -o loop,rw _disk_image fsmount
        echo "Results: "
        sudo cat fsmount/home/anon/test-results.log
        if ! sudo grep -q "Failed: 0" fsmount/home/anon/test-results.log
        then
          echo "::error :^( Tests failed, failing job"
          exit 1
        fi
        echo "::endgroup::"
      timeout-minutes: 60

    - name: Print Target Logs
      if: ${{ !cancelled() && matrix.debug-options == 'NORMAL_DEBUG'}}
      working-directory: ${{ github.workspace }}/Build
      run: '[ ! -e debug.log ] || cat debug.log'

  build_and_test_lagom:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - with-fuzzers: FUZZ
            os: ubuntu-20.04
            allow-test-failure: false
          - with-fuzzers: NO_FUZZ
            os: ubuntu-20.04
            allow-test-failure: false
          - with-fuzzers: NO_FUZZ
            os: macos-10.15
            allow-test-failure: true

    steps:
    - uses: actions/checkout@v2

    - name: Install Ubuntu dependencies
      run: |
        sudo apt-get purge -y clang-11
        sudo apt-get update
        sudo apt-get install ninja-build
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 100
        # Install wabt tools from github packages
        wget https://github.com/WebAssembly/wabt/releases/download/1.0.23/wabt-1.0.23-ubuntu.tar.gz
        tar -xzf ./wabt-1.0.23-ubuntu.tar.gz
        rm ./wabt-1.0.23-ubuntu.tar.gz
        echo "$PWD/wabt-1.0.23/bin" >> $GITHUB_PATH
      if: ${{ runner.os == 'Linux' }}
    - name: Install macOS dependencies
      run: brew install ninja wabt
      if: ${{ runner.os == 'macOS' }}
    - name: Check versions
      run: set +e; clang --version; clang++ --version; ninja --version; wat2wasm --version

    - name: Create build environment (fuzz)
      working-directory: ${{ github.workspace }}/Meta/Lagom
      run: |
        mkdir -p Build
        cd Build
        cmake -GNinja -DBUILD_LAGOM=ON -DENABLE_FUZZER_SANITIZER=ON -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DENABLE_USB_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
      if: ${{ matrix.with-fuzzers == 'FUZZ' }}

    - name: Create build environment (no fuzz)
      working-directory: ${{ github.workspace }}/Meta/Lagom
      run: |
        mkdir -p Build
        cd Build
        cmake -GNinja -DBUILD_LAGOM=ON -DINCLUDE_WASM_SPEC_TESTS=ON -DWASM_SPEC_TEST_SKIP_FORMATTING=ON -DENABLE_UNDEFINED_SANITIZER=ON -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DENABLE_USB_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 ..
      if: ${{ matrix.with-fuzzers == 'NO_FUZZ' }}


    - name: Build Lagom
      working-directory: ${{ github.workspace }}/Meta/Lagom/Build
      run: cmake --build .

    - name: Run CMake tests
      working-directory: ${{ github.workspace }}/Meta/Lagom/Build
      run: ninja test || ${{ matrix.allow-test-failure }}
      timeout-minutes: 4
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
        ASAN_OPTIONS: "strict_string_checks=1:check_initialization_order=1:strict_init_order=1"
        UBSAN_OPTIONS: "print_stacktrace=1:print_summary=1:halt_on_error=1"
      if: ${{ matrix.with-fuzzers == 'NO_FUZZ' }}